(declare-sort sk 0)
(declare-datatypes () ((list (nil) (cons (head sk) (tail list)))))
(declare-datatypes () ((Nat (Z) (S (p Nat)))))
(declare-fun length (list) Nat)
(declare-fun even (Nat) Bool)
(declare-fun append (list list) list)
(assert (= (length nil) Z))
(assert
  (forall ((y sk) (xs list))
    (= (length (cons y xs)) (S (length xs)))))
(assert (= (even Z) true))
(assert (= (even (S Z)) false))
(assert (forall ((z Nat)) (= (even (S (S z))) (even z))))
(assert (forall ((y list)) (= (append nil y) y)))
(assert
  (forall ((y list) (z sk) (xs list))
    (= (append (cons z xs) y) (cons z (append xs y)))))
(assert-not
  (forall ((x list) (y list))
    (= (even (length (append x y))) (even (length (append y x))))))
(check-sat)
