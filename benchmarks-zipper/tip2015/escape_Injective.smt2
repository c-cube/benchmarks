(declare-datatypes () ((Token (A) (B) (C) (D) (ESC) (P) (Q) (R))))
(declare-datatypes ()
  ((list (nil) (cons (head Token) (tail list)))))
(declare-fun isSpecial (Token) Bool)
(declare-fun code (Token) Token)
(declare-fun escape (list) list)
(assert
  (forall ((x Token))
    (=> (distinct x ESC)
      (=> (distinct x P)
        (=> (distinct x Q) (=> (distinct x R) (= (isSpecial x) false)))))))
(assert (= (isSpecial ESC) true))
(assert (= (isSpecial P) true))
(assert (= (isSpecial Q) true))
(assert (= (isSpecial R) true))
(assert
  (forall ((x Token))
    (=> (distinct x ESC)
      (=> (distinct x P)
        (=> (distinct x Q) (=> (distinct x R) (= (code x) x)))))))
(assert (= (code ESC) ESC))
(assert (= (code P) A))
(assert (= (code Q) B))
(assert (= (code R) C))
(assert (= (escape nil) nil))
(assert
  (forall ((y Token) (xs list))
    (=> (= (isSpecial y) true)
      (= (escape (cons y xs)) (cons ESC (cons (code y) (escape xs)))))))
(assert
  (forall ((y Token) (xs list))
    (=> (= (isSpecial y) false)
      (= (escape (cons y xs)) (cons y (escape xs))))))
(assert-not
  (forall ((xs list) (ys list))
    (=> (= (escape xs) (escape ys)) (= xs ys))))
(check-sat)
