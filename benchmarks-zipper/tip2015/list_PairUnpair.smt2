(declare-sort sk 0)
(declare-datatypes ()
  ((list2 (nil2) (cons2 (head2 sk) (tail2 list2)))))
(declare-datatypes () ((Pair (Pair2 (first sk) (second sk)))))
(declare-datatypes ()
  ((list (nil) (cons (head Pair) (tail list)))))
(declare-datatypes () ((Nat (Z) (S (p Nat)))))
(declare-fun unpair (list) list2)
(declare-fun pairs (list2) list)
(declare-fun length (list2) Nat)
(declare-fun even (Nat) Bool)
(assert (= (unpair nil) nil2))
(assert
  (forall ((xys list) (z sk) (y2 sk))
    (= (unpair (cons (Pair2 z y2) xys))
      (cons2 z (cons2 y2 (unpair xys))))))
(assert (= (pairs nil2) nil))
(assert (forall ((y sk)) (= (pairs (cons2 y nil2)) nil)))
(assert
  (forall ((y sk) (y2 sk) (xs list2))
    (= (pairs (cons2 y (cons2 y2 xs)))
      (cons (Pair2 y y2) (pairs xs)))))
(assert (= (length nil2) Z))
(assert
  (forall ((y sk) (xs list2))
    (= (length (cons2 y xs)) (S (length xs)))))
(assert (= (even Z) true))
(assert (= (even (S Z)) false))
(assert (forall ((z Nat)) (= (even (S (S z))) (even z))))
(assert-not
  (forall ((xs list2))
    (=> (even (length xs)) (= (unpair (pairs xs)) xs))))
(check-sat)
