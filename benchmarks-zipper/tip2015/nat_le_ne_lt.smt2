(declare-sort sk 0)
(declare-datatypes () ((Nat (Z) (S (p Nat)))))
(declare-fun lt (Nat Nat) Bool)
(declare-fun le (Nat Nat) Bool)
(declare-fun equal (Nat Nat) Bool)
(declare-fun unequal (Nat Nat) Bool)
(assert (forall ((x Nat)) (= (lt x Z) false)))
(assert (forall ((z Nat)) (= (lt Z (S z)) true)))
(assert (forall ((z Nat) (n Nat)) (= (lt (S n) (S z)) (lt n z))))
(assert (forall ((y Nat)) (= (le Z y) true)))
(assert (forall ((z Nat)) (= (le (S z) Z) false)))
(assert
  (forall ((z Nat) (x2 Nat)) (= (le (S z) (S x2)) (le z x2))))
(assert (= (equal Z Z) true))
(assert (forall ((z Nat)) (= (equal Z (S z)) false)))
(assert (forall ((x2 Nat)) (= (equal (S x2) Z) false)))
(assert
  (forall ((x2 Nat) (y2 Nat))
    (= (equal (S x2) (S y2)) (equal x2 y2))))
(assert
  (forall ((x Nat) (y Nat)) (= (unequal x y) (not (equal x y)))))
(assert-not
  (forall ((x Nat) (y Nat))
    (=> (le x y) (=> (unequal x y) (lt x y)))))
(check-sat)
