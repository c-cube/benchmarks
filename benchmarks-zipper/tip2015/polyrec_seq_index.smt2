(declare-sort list3 0)
(declare-sort Pair3 0)
(declare-sort Maybe3 0)
(declare-sort Seq2 0)
(declare-sort sk 0)
(declare-datatypes ()
  ((list2 (nil2) (cons2 (head2 sk) (tail2 list2)))))
(declare-datatypes () ((Maybe (Nothing2) (Just2 (Just_02 sk)))))
(declare-datatypes () ((Pair (Pair2 (first sk) (second Maybe)))))
(declare-datatypes () ((Maybe2 (Nothing) (Just (Just_0 Pair)))))
(declare-datatypes ()
  ((Seq (Nil) (Cons (Cons_0 Pair) (Cons_1 Seq2)))))
(declare-datatypes ()
  ((Seq3 (Nil2) (Cons2 (Cons_02 sk) (Cons_12 Seq)))))
(declare-datatypes ()
  ((list (nil) (cons (head Pair) (tail list)))))
(declare-fun snd (Pair3) Maybe2)
(declare-fun pair (list) list3)
(declare-fun fst (Pair3) Pair)
(declare-fun index (Int Seq) Maybe2)
(declare-fun fromList (list) Seq)
(declare-fun snd2 (Pair) Maybe)
(declare-fun pair2 (list2) list)
(declare-fun lookup (Int list2) Maybe)
(declare-fun fst2 (Pair) sk)
(declare-fun index2 (Int Seq3) Maybe)
(declare-fun fromList2 (list2) Seq3)
(assert (forall ((y sk) (z Maybe)) (= (snd2 (Pair2 y z)) z)))
(assert (= (pair2 nil2) nil))
(assert
  (forall ((y sk))
    (= (pair2 (cons2 y nil2)) (cons (Pair2 y Nothing2) nil))))
(assert
  (forall ((y sk) (y2 sk) (xs list2))
    (= (pair2 (cons2 y (cons2 y2 xs)))
      (cons (Pair2 y (Just2 y2)) (pair2 xs)))))
(assert (forall ((x Int)) (= (lookup x nil2) Nothing2)))
(assert
  (forall ((x Int) (z sk) (x2 list2))
    (=> (= (= x 0) true) (= (lookup x (cons2 z x2)) (Just2 z)))))
(assert
  (forall ((x Int) (z sk) (x2 list2))
    (=> (= (= x 0) false)
      (= (lookup x (cons2 z x2)) (lookup (- x 1) x2)))))
(assert (forall ((y sk) (z Maybe)) (= (fst2 (Pair2 y z)) y)))
(assert (forall ((x Int)) (= (index2 x Nil2) Nothing2)))
(assert
  (forall ((x Int) (z sk) (x2 Seq))
    (=> (= (= x 0) true) (= (index2 x (Cons2 z x2)) (Just2 z)))))
(assert
  (forall ((x Int) (z sk) (x2 Seq))
    (=> (= (= x 0) false)
      (=> (= (= (mod x 2) 0) true)
        (=> (= (index (div (- x 1) 2) x2) Nothing)
          (= (index2 x (Cons2 z x2)) Nothing2))))))
(assert
  (forall ((x Int) (z sk) (x2 Seq) (x4 Pair))
    (=> (= (= x 0) false)
      (=> (= (= (mod x 2) 0) true)
        (=> (= (index (div (- x 1) 2) x2) (Just x4))
          (= (index2 x (Cons2 z x2)) (snd2 x4)))))))
(assert
  (forall ((x Int) (z sk) (x2 Seq))
    (=> (= (= x 0) false)
      (=> (= (= (mod x 2) 0) false)
        (=> (= (index (div (- x 1) 2) x2) Nothing)
          (= (index2 x (Cons2 z x2)) Nothing2))))))
(assert
  (forall ((x Int) (z sk) (x2 Seq) (x3 Pair))
    (=> (= (= x 0) false)
      (=> (= (= (mod x 2) 0) false)
        (=> (= (index (div (- x 1) 2) x2) (Just x3))
          (= (index2 x (Cons2 z x2)) (Just2 (fst2 x3))))))))
(assert (= (fromList2 nil2) Nil2))
(assert
  (forall ((y sk) (xs list2))
    (= (fromList2 (cons2 y xs)) (Cons2 y (fromList (pair2 xs))))))
(assert-not
  (forall ((n Int) (xs list2))
    (=> (>= n 0) (= (lookup n xs) (index2 n (fromList2 xs))))))
(check-sat)
