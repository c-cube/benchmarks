(declare-datatypes ()
  ((list3 (nil3) (cons3 (head3 Bool) (tail3 list3)))))
(declare-datatypes () ((It (A) (B) (C))))
(declare-datatypes ()
  ((list2 (nil2) (cons2 (head2 It) (tail2 list2)))))
(declare-datatypes ()
  ((list (nil) (cons (head list2) (tail list)))))
(declare-fun removeOne2 (It list) list)
(declare-fun removeOne (list2) list)
(declare-fun or2 (list3) Bool)
(declare-fun eq (It It) Bool)
(declare-fun isPrefix (list2 list2) Bool)
(declare-fun spec2 (list2 list) list3)
(declare-fun spec (list2 list2) Bool)
(declare-fun isRelaxedPrefix (list2 list2) Bool)
(assert (forall ((x It)) (= (removeOne2 x nil) nil)))
(assert
  (forall ((x It) (z list2) (x2 list))
    (= (removeOne2 x (cons z x2))
      (cons (cons2 x z) (removeOne2 x x2)))))
(assert (= (removeOne nil2) nil))
(assert
  (forall ((y It) (xs list2))
    (= (removeOne (cons2 y xs))
      (cons xs (removeOne2 y (removeOne xs))))))
(assert (= (or2 nil3) false))
(assert
  (forall ((y Bool) (xs list3))
    (= (or2 (cons3 y xs)) (or y (or2 xs)))))
(assert (forall ((y It)) (=> (distinct y A) (= (eq A y) false))))
(assert (= (eq A A) true))
(assert (forall ((y It)) (=> (distinct y B) (= (eq B y) false))))
(assert (= (eq B B) true))
(assert (forall ((y It)) (=> (distinct y C) (= (eq C y) false))))
(assert (= (eq C C) true))
(assert (forall ((y list2)) (= (isPrefix nil2 y) true)))
(assert
  (forall ((z It) (x2 list2))
    (= (isPrefix (cons2 z x2) nil2) false)))
(assert
  (forall ((z It) (x2 list2) (x3 It) (x4 list2))
    (= (isPrefix (cons2 z x2) (cons2 x3 x4))
      (and (eq z x3) (isPrefix x2 x4)))))
(assert (forall ((ys list2)) (= (spec2 ys nil) nil3)))
(assert
  (forall ((ys list2) (y list2) (z list))
    (= (spec2 ys (cons y z)) (cons3 (isPrefix y ys) (spec2 ys z)))))
(assert
  (forall ((x list2) (y list2))
    (= (spec x y) (or2 (spec2 y (cons x (removeOne x)))))))
(assert (forall ((y list2)) (= (isRelaxedPrefix nil2 y) true)))
(assert
  (forall ((y list2) (z It))
    (= (isRelaxedPrefix (cons2 z nil2) y) true)))
(assert
  (forall ((z It) (x3 It) (x4 list2))
    (= (isRelaxedPrefix (cons2 z (cons2 x3 x4)) nil2) false)))
(assert
  (forall ((z It) (x3 It) (x4 list2) (x5 It) (x6 list2))
    (=> (= (eq z x5) true)
      (= (isRelaxedPrefix (cons2 z (cons2 x3 x4)) (cons2 x5 x6))
        (isRelaxedPrefix (cons2 x3 x4) x6)))))
(assert
  (forall ((z It) (x3 It) (x4 list2) (x5 It) (x6 list2))
    (=> (= (eq z x5) false)
      (= (isRelaxedPrefix (cons2 z (cons2 x3 x4)) (cons2 x5 x6))
        (isPrefix (cons2 x3 x4) (cons2 x5 x6))))))
(assert-not
  (forall ((xs list2) (ys list2))
    (= (isRelaxedPrefix xs ys) (spec xs ys))))
(check-sat)
