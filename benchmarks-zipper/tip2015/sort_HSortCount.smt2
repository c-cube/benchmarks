(declare-datatypes () ((Nat2 (Z) (S (p Nat2)))))
(declare-datatypes () ((Nat (Z2) (S2 (q Nat)))))
(declare-datatypes ()
  ((list2 (nil2) (cons2 (head2 Nat) (tail2 list2)))))
(declare-datatypes ()
  ((Heap (Node (Node_0 Heap) (Node_1 Nat) (Node_2 Heap)) (Nil))))
(declare-datatypes ()
  ((list (nil) (cons (head Heap) (tail list)))))
(declare-fun zcount (Nat list2) Nat2)
(declare-fun toHeap2 (list2) list)
(declare-fun hmerge (Heap Heap) Heap)
(declare-fun hpairwise (list) list)
(declare-fun hmerging (list) Heap)
(declare-fun toHeap (list2) Heap)
(declare-fun toList (Heap) list2)
(declare-fun hsort (list2) list2)
(declare-fun le (Nat Nat) Bool)
(declare-fun equal (Nat Nat) Bool)
(assert (forall ((x Nat)) (= (zcount x nil2) Z)))
(assert
  (forall ((x Nat) (z Nat) (xs list2))
    (=> (= (equal x z) true)
      (= (zcount x (cons2 z xs)) (S (zcount x xs))))))
(assert
  (forall ((x Nat) (z Nat) (xs list2))
    (=> (= (equal x z) false)
      (= (zcount x (cons2 z xs)) (zcount x xs)))))
(assert (= (toHeap2 nil2) nil))
(assert
  (forall ((y Nat) (z list2))
    (= (toHeap2 (cons2 y z)) (cons (Node Nil y Nil) (toHeap2 z)))))
(assert
  (forall ((z Heap) (x2 Nat) (x3 Heap) (x4 Heap) (x5 Nat) (x6 Heap))
    (=> (= (le x2 x5) true)
      (= (hmerge (Node z x2 x3) (Node x4 x5 x6))
        (Node (hmerge x3 (Node x4 x5 x6)) x2 z)))))
(assert
  (forall ((z Heap) (x2 Nat) (x3 Heap) (x4 Heap) (x5 Nat) (x6 Heap))
    (=> (= (le x2 x5) false)
      (= (hmerge (Node z x2 x3) (Node x4 x5 x6))
        (Node (hmerge (Node z x2 x3) x6) x5 x4)))))
(assert
  (forall ((z Heap) (x2 Nat) (x3 Heap))
    (= (hmerge (Node z x2 x3) Nil) (Node z x2 x3))))
(assert (forall ((y Heap)) (= (hmerge Nil y) y)))
(assert (= (hpairwise nil) nil))
(assert
  (forall ((r Heap)) (= (hpairwise (cons r nil)) (cons r nil))))
(assert
  (forall ((r Heap) (q2 Heap) (qs list))
    (= (hpairwise (cons r (cons q2 qs)))
      (cons (hmerge r q2) (hpairwise qs)))))
(assert (= (hmerging nil) Nil))
(assert (forall ((r Heap)) (= (hmerging (cons r nil)) r)))
(assert
  (forall ((r Heap) (z Heap) (x2 list))
    (= (hmerging (cons r (cons z x2)))
      (hmerging (hpairwise (cons r (cons z x2)))))))
(assert (forall ((x list2)) (= (toHeap x) (hmerging (toHeap2 x)))))
(assert
  (forall ((r Heap) (y Nat) (q2 Heap))
    (= (toList (Node r y q2)) (cons2 y (toList (hmerge r q2))))))
(assert (= (toList Nil) nil2))
(assert (forall ((x list2)) (= (hsort x) (toList (toHeap x)))))
(assert (forall ((y Nat)) (= (le Z2 y) true)))
(assert (forall ((z Nat)) (= (le (S2 z) Z2) false)))
(assert
  (forall ((z Nat) (x2 Nat)) (= (le (S2 z) (S2 x2)) (le z x2))))
(assert (= (equal Z2 Z2) true))
(assert (forall ((z Nat)) (= (equal Z2 (S2 z)) false)))
(assert (forall ((x2 Nat)) (= (equal (S2 x2) Z2) false)))
(assert
  (forall ((x2 Nat) (y2 Nat))
    (= (equal (S2 x2) (S2 y2)) (equal x2 y2))))
(assert-not
  (forall ((x Nat) (y list2)) (= (zcount x (hsort y)) (zcount x y))))
(check-sat)
