(declare-datatypes () ((Nat (Z) (S (p Nat)))))
(declare-datatypes ()
  ((list2 (nil2) (cons2 (head2 Nat) (tail2 list2)))))
(declare-datatypes ()
  ((Heap (Node (Node_0 Heap) (Node_1 Nat) (Node_2 Heap)) (Nil))))
(declare-datatypes ()
  ((list (nil) (cons (head Heap) (tail list)))))
(declare-fun toHeap2 (list2) list)
(declare-fun insert2 (Nat list2) list2)
(declare-fun isort (list2) list2)
(declare-fun hmerge (Heap Heap) Heap)
(declare-fun hpairwise (list) list)
(declare-fun hmerging (list) Heap)
(declare-fun toHeap (list2) Heap)
(declare-fun toList (Heap) list2)
(declare-fun hsort (list2) list2)
(declare-fun le (Nat Nat) Bool)
(assert (= (toHeap2 nil2) nil))
(assert
  (forall ((y Nat) (z list2))
    (= (toHeap2 (cons2 y z)) (cons (Node Nil y Nil) (toHeap2 z)))))
(assert (forall ((x Nat)) (= (insert2 x nil2) (cons2 x nil2))))
(assert
  (forall ((x Nat) (z Nat) (xs list2))
    (=> (= (le x z) true)
      (= (insert2 x (cons2 z xs)) (cons2 x (cons2 z xs))))))
(assert
  (forall ((x Nat) (z Nat) (xs list2))
    (=> (= (le x z) false)
      (= (insert2 x (cons2 z xs)) (cons2 z (insert2 x xs))))))
(assert (= (isort nil2) nil2))
(assert
  (forall ((y Nat) (xs list2))
    (= (isort (cons2 y xs)) (insert2 y (isort xs)))))
(assert
  (forall ((z Heap) (x2 Nat) (x3 Heap) (x4 Heap) (x5 Nat) (x6 Heap))
    (=> (= (le x2 x5) true)
      (= (hmerge (Node z x2 x3) (Node x4 x5 x6))
        (Node (hmerge x3 (Node x4 x5 x6)) x2 z)))))
(assert
  (forall ((z Heap) (x2 Nat) (x3 Heap) (x4 Heap) (x5 Nat) (x6 Heap))
    (=> (= (le x2 x5) false)
      (= (hmerge (Node z x2 x3) (Node x4 x5 x6))
        (Node (hmerge (Node z x2 x3) x6) x5 x4)))))
(assert
  (forall ((z Heap) (x2 Nat) (x3 Heap))
    (= (hmerge (Node z x2 x3) Nil) (Node z x2 x3))))
(assert (forall ((y Heap)) (= (hmerge Nil y) y)))
(assert (= (hpairwise nil) nil))
(assert
  (forall ((q Heap)) (= (hpairwise (cons q nil)) (cons q nil))))
(assert
  (forall ((q Heap) (r Heap) (qs list))
    (= (hpairwise (cons q (cons r qs)))
      (cons (hmerge q r) (hpairwise qs)))))
(assert (= (hmerging nil) Nil))
(assert (forall ((q Heap)) (= (hmerging (cons q nil)) q)))
(assert
  (forall ((q Heap) (z Heap) (x2 list))
    (= (hmerging (cons q (cons z x2)))
      (hmerging (hpairwise (cons q (cons z x2)))))))
(assert (forall ((x list2)) (= (toHeap x) (hmerging (toHeap2 x)))))
(assert
  (forall ((q Heap) (y Nat) (r Heap))
    (= (toList (Node q y r)) (cons2 y (toList (hmerge q r))))))
(assert (= (toList Nil) nil2))
(assert (forall ((x list2)) (= (hsort x) (toList (toHeap x)))))
(assert (forall ((y Nat)) (= (le Z y) true)))
(assert (forall ((z Nat)) (= (le (S z) Z) false)))
(assert
  (forall ((z Nat) (x2 Nat)) (= (le (S z) (S x2)) (le z x2))))
(assert-not (forall ((x list2)) (= (hsort x) (isort x))))
(check-sat)
