(declare-datatypes () ((Nat (Z) (S (p Nat)))))
(declare-datatypes ()
  ((list2 (nil2) (cons2 (head2 Nat) (tail2 list2)))))
(declare-datatypes ()
  ((list (nil) (cons (head list2) (tail list)))))
(declare-fun zelem (Nat list2) Bool)
(declare-fun zdelete (Nat list2) list2)
(declare-fun risers (list2) list)
(declare-fun null (list2) Bool)
(declare-fun zisPermutation (list2 list2) Bool)
(declare-fun lmerge (list2 list2) list2)
(declare-fun pairwise (list) list)
(declare-fun mergingbu2 (list) list2)
(declare-fun msortbu2 (list2) list2)
(declare-fun le (Nat Nat) Bool)
(declare-fun equal (Nat Nat) Bool)
(assert (forall ((x Nat)) (= (zelem x nil2) false)))
(assert
  (forall ((x Nat) (z Nat) (ys list2))
    (= (zelem x (cons2 z ys)) (or (equal x z) (zelem x ys)))))
(assert (forall ((x Nat)) (= (zdelete x nil2) nil2)))
(assert
  (forall ((x Nat) (z Nat) (ys list2))
    (=> (= (equal x z) true) (= (zdelete x (cons2 z ys)) ys))))
(assert
  (forall ((x Nat) (z Nat) (ys list2))
    (=> (= (equal x z) false)
      (= (zdelete x (cons2 z ys)) (cons2 z (zdelete x ys))))))
(assert (= (risers nil2) nil))
(assert
  (forall ((y Nat))
    (= (risers (cons2 y nil2)) (cons (cons2 y nil2) nil))))
(assert
  (forall ((y Nat) (y2 Nat) (xs list2))
    (=> (= (le y y2) true)
      (=> (= (risers (cons2 y2 xs)) nil)
        (= (risers (cons2 y (cons2 y2 xs))) nil)))))
(assert
  (forall ((y Nat) (y2 Nat) (xs list2) (ys list2) (yss list))
    (=> (= (le y y2) true)
      (=> (= (risers (cons2 y2 xs)) (cons ys yss))
        (= (risers (cons2 y (cons2 y2 xs))) (cons (cons2 y ys) yss))))))
(assert
  (forall ((y Nat) (y2 Nat) (xs list2))
    (=> (= (le y y2) false)
      (= (risers (cons2 y (cons2 y2 xs)))
        (cons (cons2 y nil2) (risers (cons2 y2 xs)))))))
(assert (= (null nil2) true))
(assert (forall ((y Nat) (z list2)) (= (null (cons2 y z)) false)))
(assert (forall ((y list2)) (= (zisPermutation nil2 y) (null y))))
(assert
  (forall ((y list2) (z Nat) (xs list2))
    (= (zisPermutation (cons2 z xs) y)
      (and (zelem z y) (zisPermutation xs (zdelete z y))))))
(assert (forall ((y list2)) (= (lmerge nil2 y) y)))
(assert
  (forall ((z Nat) (x2 list2))
    (= (lmerge (cons2 z x2) nil2) (cons2 z x2))))
(assert
  (forall ((z Nat) (x2 list2) (x3 Nat) (x4 list2))
    (=> (= (le z x3) true)
      (= (lmerge (cons2 z x2) (cons2 x3 x4))
        (cons2 z (lmerge x2 (cons2 x3 x4)))))))
(assert
  (forall ((z Nat) (x2 list2) (x3 Nat) (x4 list2))
    (=> (= (le z x3) false)
      (= (lmerge (cons2 z x2) (cons2 x3 x4))
        (cons2 x3 (lmerge (cons2 z x2) x4))))))
(assert (= (pairwise nil) nil))
(assert
  (forall ((xs list2)) (= (pairwise (cons xs nil)) (cons xs nil))))
(assert
  (forall ((xs list2) (ys list2) (xss list))
    (= (pairwise (cons xs (cons ys xss)))
      (cons (lmerge xs ys) (pairwise xss)))))
(assert (= (mergingbu2 nil) nil2))
(assert (forall ((xs list2)) (= (mergingbu2 (cons xs nil)) xs)))
(assert
  (forall ((xs list2) (z list2) (x2 list))
    (= (mergingbu2 (cons xs (cons z x2)))
      (mergingbu2 (pairwise (cons xs (cons z x2)))))))
(assert
  (forall ((x list2)) (= (msortbu2 x) (mergingbu2 (risers x)))))
(assert (forall ((y Nat)) (= (le Z y) true)))
(assert (forall ((z Nat)) (= (le (S z) Z) false)))
(assert
  (forall ((z Nat) (x2 Nat)) (= (le (S z) (S x2)) (le z x2))))
(assert (= (equal Z Z) true))
(assert (forall ((z Nat)) (= (equal Z (S z)) false)))
(assert (forall ((x2 Nat)) (= (equal (S x2) Z) false)))
(assert
  (forall ((x2 Nat) (y2 Nat))
    (= (equal (S x2) (S y2)) (equal x2 y2))))
(assert-not (forall ((x list2)) (zisPermutation (msortbu2 x) x)))
(check-sat)
