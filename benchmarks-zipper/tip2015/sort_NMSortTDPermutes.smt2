(declare-datatypes () ((Nat2 (Z) (S (p Nat2)))))
(declare-datatypes () ((Nat (Z2) (S2 (q Nat)))))
(declare-datatypes () ((list (nil) (cons (head Nat) (tail list)))))
(declare-fun zelem (Nat list) Bool)
(declare-fun zdelete (Nat list) list)
(declare-fun take (Nat2 list) list)
(declare-fun null (list) Bool)
(declare-fun zisPermutation (list list) Bool)
(declare-fun lmerge (list list) list)
(declare-fun length (list) Nat2)
(declare-fun half (Nat2) Nat2)
(declare-fun drop (Nat2 list) list)
(declare-fun nmsorttd (list) list)
(declare-fun le (Nat Nat) Bool)
(declare-fun equal (Nat Nat) Bool)
(assert (forall ((x Nat)) (= (zelem x nil) false)))
(assert
  (forall ((x Nat) (z Nat) (ys list))
    (= (zelem x (cons z ys)) (or (equal x z) (zelem x ys)))))
(assert (forall ((x Nat)) (= (zdelete x nil) nil)))
(assert
  (forall ((x Nat) (z Nat) (ys list))
    (=> (= (equal x z) true) (= (zdelete x (cons z ys)) ys))))
(assert
  (forall ((x Nat) (z Nat) (ys list))
    (=> (= (equal x z) false)
      (= (zdelete x (cons z ys)) (cons z (zdelete x ys))))))
(assert (forall ((y list)) (= (take Z y) nil)))
(assert (forall ((z Nat2)) (= (take (S z) nil) nil)))
(assert
  (forall ((z Nat2) (x2 Nat) (x3 list))
    (= (take (S z) (cons x2 x3)) (cons x2 (take z x3)))))
(assert (= (null nil) true))
(assert (forall ((y Nat) (z list)) (= (null (cons y z)) false)))
(assert (forall ((y list)) (= (zisPermutation nil y) (null y))))
(assert
  (forall ((y list) (z Nat) (xs list))
    (= (zisPermutation (cons z xs) y)
      (and (zelem z y) (zisPermutation xs (zdelete z y))))))
(assert (forall ((y list)) (= (lmerge nil y) y)))
(assert
  (forall ((z Nat) (x2 list))
    (= (lmerge (cons z x2) nil) (cons z x2))))
(assert
  (forall ((z Nat) (x2 list) (x3 Nat) (x4 list))
    (=> (= (le z x3) true)
      (= (lmerge (cons z x2) (cons x3 x4))
        (cons z (lmerge x2 (cons x3 x4)))))))
(assert
  (forall ((z Nat) (x2 list) (x3 Nat) (x4 list))
    (=> (= (le z x3) false)
      (= (lmerge (cons z x2) (cons x3 x4))
        (cons x3 (lmerge (cons z x2) x4))))))
(assert (= (length nil) Z))
(assert
  (forall ((y Nat) (xs list))
    (= (length (cons y xs)) (S (length xs)))))
(assert (= (half Z) Z))
(assert (= (half (S Z)) Z))
(assert (forall ((n Nat2)) (= (half (S (S n))) (S (half n)))))
(assert (forall ((y list)) (= (drop Z y) y)))
(assert (forall ((z Nat2)) (= (drop (S z) nil) nil)))
(assert
  (forall ((z Nat2) (x2 Nat) (x3 list))
    (= (drop (S z) (cons x2 x3)) (drop z x3))))
(assert (= (nmsorttd nil) nil))
(assert
  (forall ((y Nat)) (= (nmsorttd (cons y nil)) (cons y nil))))
(assert
  (forall ((y Nat) (x2 Nat) (x3 list) (k Nat2))
    (=> (= k (half (length (cons y (cons x2 x3)))))
      (= (nmsorttd (cons y (cons x2 x3)))
        (lmerge (nmsorttd (take k (cons y (cons x2 x3))))
          (nmsorttd (drop k (cons y (cons x2 x3)))))))))
(assert (forall ((y Nat)) (= (le Z2 y) true)))
(assert (forall ((z Nat)) (= (le (S2 z) Z2) false)))
(assert
  (forall ((z Nat) (x2 Nat)) (= (le (S2 z) (S2 x2)) (le z x2))))
(assert (= (equal Z2 Z2) true))
(assert (forall ((z Nat)) (= (equal Z2 (S2 z)) false)))
(assert (forall ((x2 Nat)) (= (equal (S2 x2) Z2) false)))
(assert
  (forall ((x2 Nat) (y2 Nat))
    (= (equal (S2 x2) (S2 y2)) (equal x2 y2))))
(assert-not (forall ((x list)) (zisPermutation (nmsorttd x) x)))
(check-sat)
