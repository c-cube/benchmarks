(declare-datatypes () ((Nat2 (Z) (S (p Nat2)))))
(declare-datatypes () ((Nat (Z2) (S2 (q Nat)))))
(declare-datatypes ()
  ((Tree (TNode (TNode_0 Tree) (TNode_1 Nat) (TNode_2 Tree))
     (TNil))))
(declare-datatypes () ((list (nil) (cons (head Nat) (tail list)))))
(declare-fun zcount (Nat list) Nat2)
(declare-fun flatten (Tree list) list)
(declare-fun add (Nat Tree) Tree)
(declare-fun toTree (list) Tree)
(declare-fun tsort (list) list)
(declare-fun le (Nat Nat) Bool)
(declare-fun equal (Nat Nat) Bool)
(assert (forall ((x Nat)) (= (zcount x nil) Z)))
(assert
  (forall ((x Nat) (z Nat) (xs list))
    (=> (= (equal x z) true)
      (= (zcount x (cons z xs)) (S (zcount x xs))))))
(assert
  (forall ((x Nat) (z Nat) (xs list))
    (=> (= (equal x z) false)
      (= (zcount x (cons z xs)) (zcount x xs)))))
(assert
  (forall ((y list) (r Tree) (z Nat) (q2 Tree))
    (= (flatten (TNode r z q2) y)
      (flatten r (cons z (flatten q2 y))))))
(assert (forall ((y list)) (= (flatten TNil y) y)))
(assert
  (forall ((x Nat) (r Tree) (z Nat) (q2 Tree))
    (=> (= (le x z) true)
      (= (add x (TNode r z q2)) (TNode (add x r) z q2)))))
(assert
  (forall ((x Nat) (r Tree) (z Nat) (q2 Tree))
    (=> (= (le x z) false)
      (= (add x (TNode r z q2)) (TNode r z (add x q2))))))
(assert (forall ((x Nat)) (= (add x TNil) (TNode TNil x TNil))))
(assert (= (toTree nil) TNil))
(assert
  (forall ((y Nat) (xs list))
    (= (toTree (cons y xs)) (add y (toTree xs)))))
(assert (forall ((x list)) (= (tsort x) (flatten (toTree x) nil))))
(assert (forall ((y Nat)) (= (le Z2 y) true)))
(assert (forall ((z Nat)) (= (le (S2 z) Z2) false)))
(assert
  (forall ((z Nat) (x2 Nat)) (= (le (S2 z) (S2 x2)) (le z x2))))
(assert (= (equal Z2 Z2) true))
(assert (forall ((z Nat)) (= (equal Z2 (S2 z)) false)))
(assert (forall ((x2 Nat)) (= (equal (S2 x2) Z2) false)))
(assert
  (forall ((x2 Nat) (y2 Nat))
    (= (equal (S2 x2) (S2 y2)) (equal x2 y2))))
(assert-not
  (forall ((x Nat) (y list)) (= (zcount x (tsort y)) (zcount x y))))
(check-sat)
