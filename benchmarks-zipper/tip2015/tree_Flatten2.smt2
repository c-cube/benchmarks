(declare-sort sk 0)
(declare-datatypes () ((list (nil) (cons (head sk) (tail list)))))
(declare-datatypes ()
  ((Tree (Node (Node_0 Tree) (Node_1 sk) (Node_2 Tree)) (Nil))))
(declare-fun flatten2 (Tree list) list)
(declare-fun append (list list) list)
(declare-fun flatten0 (Tree) list)
(assert
  (forall ((y list) (p Tree) (z sk) (q Tree))
    (= (flatten2 (Node p z q) y)
      (flatten2 p (cons z (flatten2 q y))))))
(assert (forall ((y list)) (= (flatten2 Nil y) y)))
(assert (forall ((y list)) (= (append nil y) y)))
(assert
  (forall ((y list) (z sk) (xs list))
    (= (append (cons z xs) y) (cons z (append xs y)))))
(assert
  (forall ((p Tree) (y sk) (q Tree))
    (= (flatten0 (Node p y q))
      (append (append (flatten0 p) (cons y nil)) (flatten0 q)))))
(assert (= (flatten0 Nil) nil))
(assert-not (forall ((p Tree)) (= (flatten2 p nil) (flatten0 p))))
(check-sat)
