(declare-datatypes () ((Nat (Z) (S (p Nat)))))
(declare-datatypes ()
  ((Tree (Node (Node_0 Tree) (Node_1 Nat) (Node_2 Tree)) (Nil))))
(declare-datatypes () ((list (nil) (cons (head Nat) (tail list)))))
(declare-fun null (list) Bool)
(declare-fun le (Nat Nat) Bool)
(declare-fun flatten (Tree list) list)
(declare-fun equal (Nat Nat) Bool)
(declare-fun elem (Nat list) Bool)
(declare-fun delete (Nat list) list)
(declare-fun isPermutation (list list) Bool)
(declare-fun add (Nat Tree) Tree)
(declare-fun toTree (list) Tree)
(declare-fun tsort (list) list)
(assert (= (null nil) true))
(assert (forall ((y Nat) (z list)) (= (null (cons y z)) false)))
(assert (forall ((y Nat)) (= (le Z y) true)))
(assert (forall ((z Nat)) (= (le (S z) Z) false)))
(assert
  (forall ((z Nat) (x2 Nat)) (= (le (S z) (S x2)) (le z x2))))
(assert
  (forall ((y list) (q Tree) (z Nat) (q2 Tree))
    (= (flatten (Node q z q2) y) (flatten q (cons z (flatten q2 y))))))
(assert (forall ((y list)) (= (flatten Nil y) y)))
(assert (= (equal Z Z) true))
(assert (forall ((z Nat)) (= (equal Z (S z)) false)))
(assert (forall ((x2 Nat)) (= (equal (S x2) Z) false)))
(assert
  (forall ((x2 Nat) (y2 Nat))
    (= (equal (S x2) (S y2)) (equal x2 y2))))
(assert (forall ((x Nat)) (= (elem x nil) false)))
(assert
  (forall ((x Nat) (z Nat) (ys list))
    (= (elem x (cons z ys)) (or (equal x z) (elem x ys)))))
(assert (forall ((x Nat)) (= (delete x nil) nil)))
(assert
  (forall ((x Nat) (z Nat) (xs list))
    (=> (= (equal x z) true) (= (delete x (cons z xs)) xs))))
(assert
  (forall ((x Nat) (z Nat) (xs list))
    (=> (= (equal x z) false)
      (= (delete x (cons z xs)) (cons z (delete x xs))))))
(assert (forall ((y list)) (= (isPermutation nil y) (null y))))
(assert
  (forall ((y list) (z Nat) (xs list))
    (= (isPermutation (cons z xs) y)
      (and (elem z y) (isPermutation xs (delete z y))))))
(assert
  (forall ((x Nat) (q Tree) (z Nat) (q2 Tree))
    (=> (= (le x z) true)
      (= (add x (Node q z q2)) (Node (add x q) z q2)))))
(assert
  (forall ((x Nat) (q Tree) (z Nat) (q2 Tree))
    (=> (= (le x z) false)
      (= (add x (Node q z q2)) (Node q z (add x q2))))))
(assert (forall ((x Nat)) (= (add x Nil) (Node Nil x Nil))))
(assert (= (toTree nil) Nil))
(assert
  (forall ((y Nat) (xs list))
    (= (toTree (cons y xs)) (add y (toTree xs)))))
(assert (forall ((x list)) (= (tsort x) (flatten (toTree x) nil))))
(assert-not (forall ((x list)) (isPermutation (tsort x) x)))
(check-sat)
