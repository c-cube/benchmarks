(declare-datatypes () ((Nat (Z) (S (p Nat)))))
(declare-datatypes ()
  ((Tree (Node (Node_0 Tree) (Node_1 Nat) (Node_2 Tree)) (Nil))))
(declare-datatypes () ((list (nil) (cons (head Nat) (tail list)))))
(declare-fun le (Nat Nat) Bool)
(declare-fun ordered (list) Bool)
(declare-fun flatten (Tree list) list)
(declare-fun add (Nat Tree) Tree)
(declare-fun toTree (list) Tree)
(declare-fun tsort (list) list)
(assert (forall ((y Nat)) (= (le Z y) true)))
(assert (forall ((z Nat)) (= (le (S z) Z) false)))
(assert
  (forall ((z Nat) (x2 Nat)) (= (le (S z) (S x2)) (le z x2))))
(assert (= (ordered nil) true))
(assert (forall ((y Nat)) (= (ordered (cons y nil)) true)))
(assert
  (forall ((y Nat) (y2 Nat) (xs list))
    (= (ordered (cons y (cons y2 xs)))
      (and (le y y2) (ordered (cons y2 xs))))))
(assert
  (forall ((y list) (q Tree) (z Nat) (q2 Tree))
    (= (flatten (Node q z q2) y) (flatten q (cons z (flatten q2 y))))))
(assert (forall ((y list)) (= (flatten Nil y) y)))
(assert
  (forall ((x Nat) (q Tree) (z Nat) (q2 Tree))
    (=> (= (le x z) true)
      (= (add x (Node q z q2)) (Node (add x q) z q2)))))
(assert
  (forall ((x Nat) (q Tree) (z Nat) (q2 Tree))
    (=> (= (le x z) false)
      (= (add x (Node q z q2)) (Node q z (add x q2))))))
(assert (forall ((x Nat)) (= (add x Nil) (Node Nil x Nil))))
(assert (= (toTree nil) Nil))
(assert
  (forall ((y Nat) (xs list))
    (= (toTree (cons y xs)) (add y (toTree xs)))))
(assert (forall ((x list)) (= (tsort x) (flatten (toTree x) nil))))
(assert-not (forall ((x list)) (ordered (tsort x))))
(check-sat)
